[project]
name = "fastapi-2fa-example"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "dadodimauro", email = "dadodimauro@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "alembic>=1.16.5",
    "asyncpg>=0.30.0",
    "fastapi[standard]>=0.116.1",
    "passlib>=1.7.4",
    "pydantic-settings>=2.10.1",
    "pydantic[email]>=2.11.7",
    "pyjwt>=2.10.1",
    "redis>=6.4.0",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.35.0",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "psycopg2-binary>=2.9.10",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-pikachu>=1.0.0",
    "ruff>=0.12.12",
    "sqlalchemy-utils>=0.42.0",
    "taskipy>=1.14.1",
]


[tool.taskipy.tasks]
up = { cmd = "scripts/up.sh", description = "Start the application with Docker Compose (watch mode)" }
down = { cmd = "scripts/down.sh", description = "Stop the application and remove containers, networks, volumes, and images created by up" }
make_migration = { cmd = "scripts/make_migration.sh", description = "Generate a new database migration" }
migrate = { cmd = "scripts/migrate.sh", description = "Apply database migrations" }
lint = { cmd = "uv run ruff format fastapi_2fa_example && uv run ruff check --fix fastapi_2fa_example", help = "Run linters with autofix" }
mypy = { cmd = "uv run mypy fastapi_2fa_example", help = "Run mypy type checks" }
test = { cmd = "uv run pytest", help = "Run tests" }
make_env = { cmd = "cp .env.template .env", description = "Create a .env file from the .env.template" }


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.mypy]
strict = true
exclude = ["venv", ".venv"]
ignore_missing_imports = true
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
strict_equality = true
disallow_untyped_defs = true
skip_cache_mtime_checks = true


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

line-length = 88
indent-width = 4

target-version = "py313"

extend-include = ["*.ipynb"]


[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "T201",   # print statements are not allowed
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

docstring-code-format = true
docstring-code-line-length = "dynamic"


[tool.pytest.ini_options]
addopts = "--pikachu"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "auth: tests that require an access token",
]
