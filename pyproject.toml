[project]
name = "fastapi-2fa-example"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "dadodimauro", email = "dadodimauro@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "asyncpg>=0.30.0",
    "fastapi[standard]>=0.116.1",
    "passlib>=1.7.4",
    "pydantic-settings>=2.10.1",
    "pydantic[email]>=2.11.7",
    "pyjwt>=2.10.1",
    "redis>=6.4.0",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.35.0",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "psycopg2-binary>=2.9.10",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-pikachu>=1.0.0",
    "ruff>=0.12.12",
    "sqlalchemy-utils>=0.42.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv"]

[tool.ruff]
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "T201",   # print statements are not allowed
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
addopts = "--pikachu"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "auth: tests that require an access token",
]
